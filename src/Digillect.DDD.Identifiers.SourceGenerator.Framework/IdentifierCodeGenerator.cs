using System.CodeDom.Compiler;

namespace Digillect.DDD.Identifiers.SourceGenerator;

internal class IdentifierCodeGenerator(Identifier identifier)
{
	/// <summary>
    /// Генерирует код идентификатора для указанной модели.
    /// </summary>
    /// <returns>Исходный код генератора</returns>
    /// <exception cref="ArgumentOutOfRangeException">При некорректном типе значения идентификатора.</exception>
    public GeneratedSource Generate()
	{
		var stringWriter = new StringWriter();
		var indentedTextWriter = new IndentedTextWriter(stringWriter);

        Emit(indentedTextWriter);

        return new GeneratedSource(
			$"{identifier.Namespace}.{identifier.Name}.g.cs",
			stringWriter.ToString());
    }

    /// <summary>
    /// Генерирует код всего файла.
    /// </summary>
    private void Emit(IndentedTextWriter writer)
    {
        EmitHeader(writer);
		EmitNamespace(writer);
    }

    /// <summary>
    /// Генерирует пространство имён и частичную структуру.
    /// </summary>
    private void EmitNamespace(IndentedTextWriter writer)
    {
        writer.WriteLine($"namespace {identifier.Namespace}");
        writer.WriteBlock(() => EmitPartialStruct(writer));
    }

    /// <summary>
    /// Генерирует частичную структуру идентификатора.
    /// </summary>
    private void EmitPartialStruct(IndentedTextWriter writer)
    {
		// List of attributes
		writer.WriteOneLinePerItem(identifier.Type.Generators.SelectMany(g => g.GenerateAttributes(identifier)), attr => attr);

		writer.WriteLine($"readonly partial struct {identifier.Name} :");
		writer.WriteIndented(() => {
			// List of implemented interfaces
			writer.WriteOneLinePerItem(identifier.Type.Generators.SelectMany(g => g.GenerateInterfaces(identifier)), @interface => $"{@interface},");
			writer.WriteLine($"global::Digillect.DDD.Identifiers.IIdentifier<{identifier.Name}, {identifier.ValueTypeName}>");
		});
        writer.WriteBlock(() => EmitIdentifierBody(writer));
    }

    /// <summary>
    /// Генерирует членов структуры идентификатора.
    /// </summary>
    private void EmitIdentifierBody(IndentedTextWriter writer)
    {
        writer.WriteLine($$"""public {{identifier.ValueTypeName}} Value { get; }""");
        writer.WriteEmptyLine();
		EmitCreate(writer);
		writer.WriteEmptyLine();

		writer.WriteItems(identifier.Type.Generators, g => g.GenerateMembers(identifier, writer));
    }

	/// <summary>
	/// Генерирует код метода Create.
	/// </summary>
	private void EmitCreate(IndentedTextWriter writer)
	{
		writer.WriteLine($"public static {identifier.Name} Create({identifier.ValueTypeName} value) => new {identifier.Name}(value);");
	}

	/// <summary>
    /// Генерирует заголовок файла.
    /// </summary>
    private static void EmitHeader(IndentedTextWriter writer)
    {
		writer.WriteLine("//-------------------------------------------------------------");
		writer.WriteLine("// This code was generated by the Identifiers source generator.");
		writer.WriteLine("// Changes to this file may cause incorrect behavior and will be lost if");
		writer.WriteLine("// the code is regenerated.");
		writer.WriteLine("//-------------------------------------------------------------");
		writer.WriteEmptyLine();
		writer.WriteLine("#nullable enable");
		writer.WriteEmptyLine();
		writer.WriteLine("#pragma warning disable 1591 // Publicly visible type or member must be documented");
		writer.WriteEmptyLine();
    }
}
